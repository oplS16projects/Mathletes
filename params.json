{
  "name": "Math Adventures",
  "tagline": "a Math Education Game for Children",
  "body": "## Welcome to Math Adventures\r\n\r\nDo you struggle with solving basic math problems?! Well fear not, you're not alone! In fact some of the smartest people in the world can't do basic arithmetic. Say goodbye to boring flashcards and hello to a new fun innovative way to learn basic arithmetic!\r\n\r\n## Authors\r\n\r\nRajia Abdelaziz (@rajiaxoxo) \r\n            and \r\nJeremy Daigneau (jDaigneau)\r\n   \r\n## Overview\r\n\r\nMath Adventures is a game designed for children (and adults!) who would like to practice basic arithmetic. The game allows users to select a character and then move over tiles to collect a specific number of gems that solve the basic arithmetic problem. If users collect the correct number of gems, they are awarded points!\r\n\r\n![](https://github.com/oplS16projects/Mathletes/blob/master/milestone_2.png)\r\n\r\n## Concepts Demonstrated\r\n\r\n*The begin special form was used to allow expressions to be evaluated in sequence and the value of the final expression to be returned. One example of begin being used is when a character is on a gem. begin is used in this scenario to first increment the count of gems collected and then to evaluate another expression in order to remove the gem from the tile.  \r\n\r\n*set! was used to change the values of predefined variables. For instance, set! was used in the placeChar function to set the player to a girl or boy depending on whether the random value generated was a 0 or 1. \r\n\r\n*A list was used to represent the problems. This list called list-of-problems contains sub-lists each representing 2 numbers that represent the operands in an arithmetic problem.\r\n\r\n*Car, Cdr, Cadrs...Etc/Recursion were used through out the program. One instance it was used is in a function called set-operand-for-new-problem. This problem takes 3 parameters: a list of problems, a counter representing what problem is currently being displayed and a problem number to display. The function checks to see if the count is equal to the problem number and if it is not it recursively calls itself with an incremented count and the cdr of the list. If the count is equal to the problem number then we use set to set operand 1 equal to (car (car lst)) and operand 2 equal to (car (cdr (car lst))).   \r\n\r\n*OOP and Counters were also demonstrated through out the program as explained above. \r\n\r\n*Conditionals / If Statements were also used through out the program to determine outcomes of certain scenarios and to check if users were on a gem. If statements were used to check if the number of gems collected was equal to the solution to the problem.\r\n \r\n \r\n##External Technology and Libraries\r\n\r\nThe libraries we used included:\r\n \r\n  * 2htdp/image         https://docs.racket-lang.org/teachpack/2htdpimage.html\r\n  \r\n  * 2htdp/planetcute:   https://docs.racket-lang.org/teachpack/2htdpPlanet_Cute_Images.html\r\n\r\n  * 2htdp/universe:     https://docs.racket-lang.org/teachpack/2htdpuniverse.html\r\n\r\n\r\nTODO: EXPLAIN WHAT EACH LIBRARY WAS USED FOR\r\n\r\n##Favorite Scheme Expressions\r\n\r\n####Rajia \r\nEach team member should identify a favorite expression or procedure, written by them, and explain what it does. Why is it your favorite? What OPL philosophy does it embody?\r\nRemember code looks something like this:\r\n```scheme\r\n(map (lambda (x) (foldr compose functions)) data)\r\n```\r\n####Jeremy\r\nThis expression reads in a regular expression and elegantly matches it against a pre-existing hashmap....\r\n```scheme\r\n(let* ((expr (convert-to-regexp (read-line my-in-port)))\r\n             (matches (flatten\r\n                       (hash-map *words*\r\n                                 (lambda (key value)\r\n                                   (if (regexp-match expr key) key '()))))))\r\n  matches)\r\n```\r\n\r\n##Additional Remarks\r\n\r\nJeremy and Rajia both really enjoyed getting to create this project and feel as though it definitely helped solidify their understanding of the concepts learned through out the semester. \r\n\r\n#How to Download and Run\r\n\r\nTo run the game, please download the fptest.rkt file from: https://github.com/oplS16projects/Mathletes/blob/master/fptest.rkt. \r\n\r\nAfter you run the .rkt program, press the f1 key as many times as you'd like to randomly change you're character's gender! Next, use the arrow keys to move you're player. Collect the appropriate number of gems that properly solves the arithmetic problem. Finally, move over the star tile to submit you're answer. If the answer is correct, points will be added to you're score. Otherwise zero points will be awarded. Continue solving math problems until you feel confident with you're math skills!",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}